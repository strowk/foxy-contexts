// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/strowk/foxy-contexts/pkg/foxytest (interfaces: TestSystem)
//
// Generated by this command:
//
//	mockgen -destination=./mock/testrunner_mock.go -package=testrunner_mock . TestSystem
//

// Package testrunner_mock is a generated GoMock package.
package testrunner_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTestSystem is a mock of TestSystem interface.
type MockTestSystem struct {
	ctrl     *gomock.Controller
	recorder *MockTestSystemMockRecorder
	isgomock struct{}
}

// MockTestSystemMockRecorder is the mock recorder for MockTestSystem.
type MockTestSystemMockRecorder struct {
	mock *MockTestSystem
}

// NewMockTestSystem creates a new mock instance.
func NewMockTestSystem(ctrl *gomock.Controller) *MockTestSystem {
	mock := &MockTestSystem{ctrl: ctrl}
	mock.recorder = &MockTestSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSystem) EXPECT() *MockTestSystemMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockTestSystem) Errorf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockTestSystemMockRecorder) Errorf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockTestSystem)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockTestSystem) Fatal(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockTestSystemMockRecorder) Fatal(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockTestSystem)(nil).Fatal), args...)
}

// Fatalf mocks base method.
func (m *MockTestSystem) Fatalf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockTestSystemMockRecorder) Fatalf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockTestSystem)(nil).Fatalf), varargs...)
}

// Log mocks base method.
func (m *MockTestSystem) Log(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockTestSystemMockRecorder) Log(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockTestSystem)(nil).Log), args...)
}

// Logf mocks base method.
func (m *MockTestSystem) Logf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockTestSystemMockRecorder) Logf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockTestSystem)(nil).Logf), varargs...)
}
